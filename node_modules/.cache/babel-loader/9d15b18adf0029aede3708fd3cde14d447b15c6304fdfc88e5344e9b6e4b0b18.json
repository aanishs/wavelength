{"ast":null,"code":"var _jsxFileName = \"/Users/aanishsachdev/Desktop/Wavelength/src/RainbowTimer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './RainbowTimer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DonutProgressBar = () => {\n  _s();\n  const [displayPercentage, setDisplayPercentage] = useState(0);\n  let percentage = 100;\n  useEffect(() => {\n    if (percentage > 0) {\n      const interval = setInterval(() => {\n        setDisplayPercentage(prev => {\n          if (prev < percentage) {\n            return prev + 1; // Increment the displayed percentage\n          } else {\n            clearInterval(interval); // Stop the interval when the target is reached\n            return prev;\n          }\n        });\n      }, 70); // Adjust the interval speed to your liking\n      return () => clearInterval(interval); // Clean up the interval on component unmount\n    }\n  }, [percentage]);\n  const getGradient = displayPercentage => {\n    const colorStops = [{\n      color: '#ea2f86',\n      stop: 0\n    }, {\n      color: '#ea2f86',\n      stop: 10\n    }, {\n      color: '#f09c0a',\n      stop: 20\n    }, {\n      color: '#f09c0a',\n      stop: 30\n    }, {\n      color: '#fae000',\n      stop: 40\n    }, {\n      color: '#fae000',\n      stop: 50\n    }, {\n      color: '#93e223',\n      stop: 60\n    }, {\n      color: '#93e223',\n      stop: 70\n    }, {\n      color: '#4070d3',\n      stop: 80\n    }, {\n      color: '#4070d3',\n      stop: 90\n    }, {\n      color: '#493c9e',\n      stop: 100\n    }];\n    let gradient = colorStops.reduce((acc, stop) => {\n      if (displayPercentage >= stop.stop) {\n        acc += `${stop.color} ${stop.stop}%, `;\n      } else if (acc === '') {\n        // This covers the case where the percentage is less than the first stop\n        acc += `${stop.color} ${displayPercentage}%, black ${displayPercentage}%, black 100%`;\n        return acc;\n      }\n      return acc;\n    }, '');\n\n    // Close the gradient if no black was added (i.e., percentage was >= last stop)\n    if (!gradient.includes('black')) {\n      gradient += `black ${displayPercentage}%, black 100%`;\n    }\n    return `conic-gradient(${gradient})`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rt-circle-one\",\n    style: {\n      background: getGradient(displayPercentage)\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rt-inner-circle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(DonutProgressBar, \"yLTphltq0bu18fmz5XY1XQ1uB20=\");\n_c = DonutProgressBar;\nexport default DonutProgressBar;\nvar _c;\n$RefreshReg$(_c, \"DonutProgressBar\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DonutProgressBar","_s","displayPercentage","setDisplayPercentage","percentage","interval","setInterval","prev","clearInterval","getGradient","colorStops","color","stop","gradient","reduce","acc","includes","className","style","background","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aanishsachdev/Desktop/Wavelength/src/RainbowTimer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './RainbowTimer.css';\n\nconst DonutProgressBar = () => {\n    const [displayPercentage, setDisplayPercentage] = useState(0);\n    let percentage = 100;\n\n    useEffect(() => {\n\n        if (percentage > 0) {\n            const interval = setInterval(() => {\n                setDisplayPercentage(prev => {\n                    if (prev < percentage) {\n                        return prev + 1; // Increment the displayed percentage\n                    } else {\n                        clearInterval(interval); // Stop the interval when the target is reached\n                        return prev;\n                    }\n                });\n            }, 70); // Adjust the interval speed to your liking\n            return () => clearInterval(interval); // Clean up the interval on component unmount\n        }\n    }, [percentage]);\n\n    const getGradient = (displayPercentage) => {\n        const colorStops = [\n            { color: '#ea2f86', stop: 0 },\n            { color: '#ea2f86', stop: 10 },\n            { color: '#f09c0a', stop: 20 },\n            { color: '#f09c0a', stop: 30 },\n            { color: '#fae000', stop: 40 },\n            { color: '#fae000', stop: 50 },\n            { color: '#93e223', stop: 60 },\n            { color: '#93e223', stop: 70 },\n            { color: '#4070d3', stop: 80 },\n            { color: '#4070d3', stop: 90 },\n            { color: '#493c9e', stop: 100 }\n        ];\n\n        let gradient = colorStops.reduce((acc, stop) => {\n            if (displayPercentage >= stop.stop) {\n                acc += `${stop.color} ${stop.stop}%, `;\n            } else if (acc === '') { // This covers the case where the percentage is less than the first stop\n                acc += `${stop.color} ${displayPercentage}%, black ${displayPercentage}%, black 100%`;\n                return acc;\n            }\n            return acc;\n        }, '');\n\n        // Close the gradient if no black was added (i.e., percentage was >= last stop)\n        if (!gradient.includes('black')) {\n            gradient += `black ${displayPercentage}%, black 100%`;\n        }\n\n        return `conic-gradient(${gradient})`;\n    };\n\n    return (\n        <div className=\"rt-circle-one\" style={{ background: getGradient(displayPercentage) }}>\n            <div className=\"rt-inner-circle\"></div>\n        </div>\n    );\n}\n\nexport default DonutProgressBar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}