{"ast":null,"code":"var _jsxFileName = \"/Users/aanishsachdev/Desktop/Wavelength/client/src/Result.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport DonutProgressBar from './DonutProgressBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Result = () => {\n  _s();\n  const [score, setScore] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    creatorName\n  } = useQuestions();\n  const {\n    gameId\n  } = useParams(); // Assuming you're using React Router and the gameId is part of the URL\n\n  useEffect(() => {\n    const fetchScore = async () => {\n      const playerId = localStorage.getItem('userId'); // Retrieve userId stored in local storage\n      if (!playerId || !gameId) {\n        setError('Invalid game or user information');\n        setLoading(false);\n        return;\n      }\n      try {\n        const response = await fetch(`https://6qpujfk4qe.execute-api.us-west-1.amazonaws.com/prod/get-score?gameId=${gameId}&playerId=${playerId}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const data = await response.json();\n        console.log(data);\n        if (response.ok) {\n          setScore(data.score);\n        } else {\n          throw new Error(data.message || 'Failed to fetch score');\n        }\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchScore();\n  }, [gameId]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container text-center mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Your Wavelength Score with \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(DonutProgressBar, {\n        percentage: score * 10\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(Result, \"S3QiUc627KQ/rB23V98k9wlOphg=\", true, function () {\n  return [useParams];\n});\n_c = Result;\nexport default Result;\nvar _c;\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"names":["React","useState","useEffect","useParams","DonutProgressBar","jsxDEV","_jsxDEV","Result","_s","score","setScore","loading","setLoading","error","setError","creatorName","useQuestions","gameId","fetchScore","playerId","localStorage","getItem","response","fetch","method","headers","data","json","console","log","ok","Error","message","err","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","display","justifyContent","percentage","_c","$RefreshReg$"],"sources":["/Users/aanishsachdev/Desktop/Wavelength/client/src/Result.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport DonutProgressBar from './DonutProgressBar';\n\nconst Result = () => {\n    const [score, setScore] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const { creatorName } = useQuestions();\n    const { gameId } = useParams(); // Assuming you're using React Router and the gameId is part of the URL\n\n    useEffect(() => {\n        const fetchScore = async () => {\n            const playerId = localStorage.getItem('userId'); // Retrieve userId stored in local storage\n            if (!playerId || !gameId) {\n                setError('Invalid game or user information');\n                setLoading(false);\n                return;\n            }\n\n            try {\n                const response = await fetch(`https://6qpujfk4qe.execute-api.us-west-1.amazonaws.com/prod/get-score?gameId=${gameId}&playerId=${playerId}`, {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                });\n                const data = await response.json();\n                console.log(data);\n                if (response.ok) {\n                    setScore(data.score); \n                } else {\n                    throw new Error(data.message || 'Failed to fetch score');\n                }\n            } catch (err) {\n                setError(err.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchScore();\n    }, [gameId]);\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error}</div>;\n\n    return (\n        <div className=\"container text-center mt-5\">\n            <h3>Your Wavelength Score with </h3>\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n                <DonutProgressBar percentage={score * 10} />\n            </div>\n        </div>\n    );\n};\n\nexport default Result;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}