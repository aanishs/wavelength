{"ast":null,"code":"var _jsxFileName = \"/Users/aanishsachdev/Desktop/Wavelength/src/RainbowTimer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './RainbowTimer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RainbowTimer = ({\n  onTimerEnd\n}) => {\n  _s();\n  const [displayPercentage, setDisplayPercentage] = useState(0);\n  const totalDuration = 10000;\n  const intervalDuration = 10;\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDisplayPercentage(prev => {\n        const nextPercentage = prev + 100 / (totalDuration / intervalDuration);\n        if (nextPercentage >= 100) {\n          clearInterval(interval);\n          setTimeout(onTimerEnd, 0); // Ensures it's called outside of the current render phase\n          return 100;\n        }\n        return nextPercentage;\n      });\n    }, intervalDuration);\n    return () => clearInterval(interval);\n  }, [onTimerEnd]);\n  const getColorForTime = percentage => {\n    const index = Math.floor(percentage / (100 / 6));\n    const colors = ['#ea2f86', '#f09c0a', '#fae000', '#93e223', '#4070d3', '#493c9e'];\n    return colors[index] || colors[colors.length - 1];\n  };\n  const getGradient = displayPercentage => {\n    const color = getColorForTime(displayPercentage);\n    return `conic-gradient(${color} ${displayPercentage}%, black ${displayPercentage + 4}%, black 100%)`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rt-circle-one\",\n    style: {\n      background: getGradient(displayPercentage)\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rt-inner-circle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(RainbowTimer, \"yLTphltq0bu18fmz5XY1XQ1uB20=\");\n_c = RainbowTimer;\nexport default RainbowTimer;\nvar _c;\n$RefreshReg$(_c, \"RainbowTimer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","RainbowTimer","onTimerEnd","_s","displayPercentage","setDisplayPercentage","totalDuration","intervalDuration","interval","setInterval","prev","nextPercentage","clearInterval","setTimeout","getColorForTime","percentage","index","Math","floor","colors","length","getGradient","color","className","style","background","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aanishsachdev/Desktop/Wavelength/src/RainbowTimer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './RainbowTimer.css';\n\nconst RainbowTimer = ({ onTimerEnd }) => {\n    const [displayPercentage, setDisplayPercentage] = useState(0);\n    const totalDuration = 10000;\n    const intervalDuration = 10;\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setDisplayPercentage(prev => {\n                const nextPercentage = prev + (100 / (totalDuration / intervalDuration));\n                if (nextPercentage >= 100) {\n                    clearInterval(interval);\n                    setTimeout(onTimerEnd, 0); // Ensures it's called outside of the current render phase\n                    return 100;\n                }\n                return nextPercentage;\n            });\n        }, intervalDuration);\n    \n        return () => clearInterval(interval);\n    }, [onTimerEnd]);\n    \n\n    const getColorForTime = (percentage) => {\n        const index = Math.floor(percentage / (100 / 6));\n        const colors = ['#ea2f86', '#f09c0a', '#fae000', '#93e223', '#4070d3', '#493c9e'];\n        return colors[index] || colors[colors.length - 1];\n    };\n\n    const getGradient = (displayPercentage) => {\n        const color = getColorForTime(displayPercentage);\n        return `conic-gradient(${color} ${displayPercentage}%, black ${displayPercentage + 4}%, black 100%)`;\n    };\n\n    return (\n        <div className=\"rt-circle-one\" style={{ background: getGradient(displayPercentage) }}>\n            <div className=\"rt-inner-circle\"></div>\n        </div>\n    );\n}\n\nexport default RainbowTimer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAC7D,MAAMS,aAAa,GAAG,KAAK;EAC3B,MAAMC,gBAAgB,GAAG,EAAE;EAE3BT,SAAS,CAAC,MAAM;IACZ,MAAMU,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/BJ,oBAAoB,CAACK,IAAI,IAAI;QACzB,MAAMC,cAAc,GAAGD,IAAI,GAAI,GAAG,IAAIJ,aAAa,GAAGC,gBAAgB,CAAE;QACxE,IAAII,cAAc,IAAI,GAAG,EAAE;UACvBC,aAAa,CAACJ,QAAQ,CAAC;UACvBK,UAAU,CAACX,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;UAC3B,OAAO,GAAG;QACd;QACA,OAAOS,cAAc;MACzB,CAAC,CAAC;IACN,CAAC,EAAEJ,gBAAgB,CAAC;IAEpB,OAAO,MAAMK,aAAa,CAACJ,QAAQ,CAAC;EACxC,CAAC,EAAE,CAACN,UAAU,CAAC,CAAC;EAGhB,MAAMY,eAAe,GAAIC,UAAU,IAAK;IACpC,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,UAAU,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC;IAChD,MAAMI,MAAM,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;IACjF,OAAOA,MAAM,CAACH,KAAK,CAAC,IAAIG,MAAM,CAACA,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC;EACrD,CAAC;EAED,MAAMC,WAAW,GAAIjB,iBAAiB,IAAK;IACvC,MAAMkB,KAAK,GAAGR,eAAe,CAACV,iBAAiB,CAAC;IAChD,OAAQ,kBAAiBkB,KAAM,IAAGlB,iBAAkB,YAAWA,iBAAiB,GAAG,CAAE,gBAAe;EACxG,CAAC;EAED,oBACIJ,OAAA;IAAKuB,SAAS,EAAC,eAAe;IAACC,KAAK,EAAE;MAAEC,UAAU,EAAEJ,WAAW,CAACjB,iBAAiB;IAAE,CAAE;IAAAsB,QAAA,eACjF1B,OAAA;MAAKuB,SAAS,EAAC;IAAiB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEd,CAAC;AAAA3B,EAAA,CAtCKF,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAwClB,eAAeA,YAAY;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}