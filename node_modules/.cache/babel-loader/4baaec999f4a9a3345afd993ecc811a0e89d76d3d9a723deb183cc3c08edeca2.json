{"ast":null,"code":"var _jsxFileName = \"/Users/aanishsachdev/Desktop/Wavelength/client/src/DisplayQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useQuestions } from './QuestionsContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DisplayQuestions = () => {\n  _s();\n  const {\n    questions\n  } = useQuestions();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState(new Array(questions.length).fill(0)); // Initialize responses array\n\n  const handleOptionClick = optionIndex => {\n    // Update the responses array with the selected option index (1, 2, 3, or 4)\n    const updatedResponses = [...responses];\n    updatedResponses[currentQuestionIndex] = optionIndex + 1; // Store as 1-based index\n    setResponses(updatedResponses);\n\n    // Move to the next question, if there are more questions\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Maybe navigate to a results page or handle the end of the quiz\n      console.log('End of questions');\n      console.log('Player responses:', updatedResponses); // Log or handle responses\n    }\n  };\n  if (questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  }\n  const {\n    question,\n    options\n  } = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container text-center mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary m-2\",\n      onClick: () => handleOptionClick(index),\n      children: option\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_s(DisplayQuestions, \"zZBfTkRL7E/EfDeCEV4re9EZY0c=\", false, function () {\n  return [useQuestions];\n});\n_c = DisplayQuestions;\nexport default DisplayQuestions;\nvar _c;\n$RefreshReg$(_c, \"DisplayQuestions\");","map":{"version":3,"names":["React","useState","useQuestions","jsxDEV","_jsxDEV","DisplayQuestions","_s","questions","currentQuestionIndex","setCurrentQuestionIndex","responses","setResponses","Array","length","fill","handleOptionClick","optionIndex","updatedResponses","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","question","options","className","map","option","index","onClick","_c","$RefreshReg$"],"sources":["/Users/aanishsachdev/Desktop/Wavelength/client/src/DisplayQuestions.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useQuestions } from './QuestionsContext';\n\nconst DisplayQuestions = () => {\n    const { questions } = useQuestions();\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [responses, setResponses] = useState(new Array(questions.length).fill(0)); // Initialize responses array\n\n    const handleOptionClick = (optionIndex) => {\n        // Update the responses array with the selected option index (1, 2, 3, or 4)\n        const updatedResponses = [...responses];\n        updatedResponses[currentQuestionIndex] = optionIndex + 1; // Store as 1-based index\n        setResponses(updatedResponses);\n\n        // Move to the next question, if there are more questions\n        if (currentQuestionIndex < questions.length - 1) {\n            setCurrentQuestionIndex(currentQuestionIndex + 1);\n        } else {\n            // Maybe navigate to a results page or handle the end of the quiz\n            console.log('End of questions');\n            console.log('Player responses:', updatedResponses); // Log or handle responses\n        }\n    };\n\n    if (questions.length === 0) {\n        return <div>Loading questions...</div>;\n    }\n\n    const { question, options } = questions[currentQuestionIndex];\n\n    return (\n        <div className=\"container text-center mt-5\">\n            <h2>{question}</h2>\n            {options.map((option, index) => (\n                <button key={index} className=\"btn btn-primary m-2\" onClick={() => handleOptionClick(index)}>\n                    {option}\n                </button>\n            ))}\n        </div>\n    );\n};\n\nexport default DisplayQuestions;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,YAAY,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC;EAAU,CAAC,GAAGL,YAAY,CAAC,CAAC;EACpC,MAAM,CAACM,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAIW,KAAK,CAACL,SAAS,CAACM,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEjF,MAAMC,iBAAiB,GAAIC,WAAW,IAAK;IACvC;IACA,MAAMC,gBAAgB,GAAG,CAAC,GAAGP,SAAS,CAAC;IACvCO,gBAAgB,CAACT,oBAAoB,CAAC,GAAGQ,WAAW,GAAG,CAAC,CAAC,CAAC;IAC1DL,YAAY,CAACM,gBAAgB,CAAC;;IAE9B;IACA,IAAIT,oBAAoB,GAAGD,SAAS,CAACM,MAAM,GAAG,CAAC,EAAE;MAC7CJ,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;IACrD,CAAC,MAAM;MACH;MACAU,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/BD,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,gBAAgB,CAAC,CAAC,CAAC;IACxD;EACJ,CAAC;EAED,IAAIV,SAAS,CAACM,MAAM,KAAK,CAAC,EAAE;IACxB,oBAAOT,OAAA;MAAAgB,QAAA,EAAK;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC1C;EAEA,MAAM;IAAEC,QAAQ;IAAEC;EAAQ,CAAC,GAAGnB,SAAS,CAACC,oBAAoB,CAAC;EAE7D,oBACIJ,OAAA;IAAKuB,SAAS,EAAC,4BAA4B;IAAAP,QAAA,gBACvChB,OAAA;MAAAgB,QAAA,EAAKK;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAClBE,OAAO,CAACE,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACvB1B,OAAA;MAAoBuB,SAAS,EAAC,qBAAqB;MAACI,OAAO,EAAEA,CAAA,KAAMhB,iBAAiB,CAACe,KAAK,CAAE;MAAAV,QAAA,EACvFS;IAAM,GADEC,KAAK;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACX,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAClB,EAAA,CArCID,gBAAgB;EAAA,QACIH,YAAY;AAAA;AAAA8B,EAAA,GADhC3B,gBAAgB;AAuCtB,eAAeA,gBAAgB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}